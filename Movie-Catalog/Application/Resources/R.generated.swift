//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 20 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: Произошла внутрення ошибка приложения при кодировании данных или выполнении запроса. Пожалуйста, попробуйте повторить попытку или свяжитесь с тех. поддержкой
      ///
      /// Key: data_mapping_error
      var data_mapping_error: RswiftResources.StringResource { .init(key: "data_mapping_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Готово
      ///
      /// Key: done
      var done: RswiftResources.StringResource { .init(key: "done", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Войти
      ///
      /// Key: enter
      var enter: RswiftResources.StringResource { .init(key: "enter", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Ошибка
      ///
      /// Key: error
      var error: RswiftResources.StringResource { .init(key: "error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Произошла ошибка: 
      ///
      /// Key: error_with_message
      var error_with_message: RswiftResources.StringResource { .init(key: "error_with_message", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: На одной из фотографий лицо не было найдено
      ///
      /// Key: face_detected
      var face_detected: RswiftResources.StringResource { .init(key: "face_detected", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Данная информация или операция не доступна для вас
      ///
      /// Key: forbidden_error
      var forbidden_error: RswiftResources.StringResource { .init(key: "forbidden_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Ваше интернет соединение было утрачено. Настройте интернет соединение и повторите попытку
      ///
      /// Key: internet_connection_lost_error
      var internet_connection_lost_error: RswiftResources.StringResource { .init(key: "internet_connection_lost_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Логин
      ///
      /// Key: login
      var login: RswiftResources.StringResource { .init(key: "login", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Интернет соединение отключено. Настройте интернет соединение и повторите попытку
      ///
      /// Key: no_connected_to_internet_error
      var no_connected_to_internet_error: RswiftResources.StringResource { .init(key: "no_connected_to_internet_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: ОК
      ///
      /// Key: ok
      var ok: RswiftResources.StringResource { .init(key: "ok", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Пароль
      ///
      /// Key: password
      var password: RswiftResources.StringResource { .init(key: "password", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Пароль не должен быть пустым
      ///
      /// Key: password_empty_error
      var password_empty_error: RswiftResources.StringResource { .init(key: "password_empty_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Регистрация
      ///
      /// Key: registration
      var registration: RswiftResources.StringResource { .init(key: "registration", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Произошла ошибка сервера. Пожалуйста, повторите попытку позже еще раз
      ///
      /// Key: server_error
      var server_error: RswiftResources.StringResource { .init(key: "server_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Произошла ошибка сервера. 
      ///
      /// Key: server_error_with_message
      var server_error_with_message: RswiftResources.StringResource { .init(key: "server_error_with_message", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Время отправки запроса истекло. Попробуйте еще раз позже
      ///
      /// Key: timeout_error
      var timeout_error: RswiftResources.StringResource { .init(key: "timeout_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Произошла непредвиденная ошибка. Пожалуйста, свяжитесь с тех. поддержкой
      ///
      /// Key: unknown_error
      var unknown_error: RswiftResources.StringResource { .init(key: "unknown_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Имя пользователя не должно быть пустым
      ///
      /// Key: username_empty_error
      var username_empty_error: RswiftResources.StringResource { .init(key: "username_empty_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Произошла внутренняя ошибка приложения. Пожалуйста, попробуйте повторить попытку или свяжитесь с тех. поддержкой
      ///
      /// Key: validate_error
      var validate_error: RswiftResources.StringResource { .init(key: "validate_error", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `accent`.
    var accent: RswiftResources.ColorResource { .init(name: "accent", path: [], bundle: bundle) }

    /// Color `background`.
    var background: RswiftResources.ColorResource { .init(name: "background", path: [], bundle: bundle) }

    /// Color `gray`.
    var gray: RswiftResources.ColorResource { .init(name: "gray", path: [], bundle: bundle) }

    /// Color `grayFaded`.
    var grayFaded: RswiftResources.ColorResource { .init(name: "grayFaded", path: [], bundle: bundle) }

    /// Color `transparent`.
    var transparent: RswiftResources.ColorResource { .init(name: "transparent", path: [], bundle: bundle) }

    /// Color `white`.
    var white: RswiftResources.ColorResource { .init(name: "white", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 1 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `appLogo`.
    var appLogo: RswiftResources.ImageResource { .init(name: "appLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}